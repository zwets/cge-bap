#!/bin/sh
#
# bap-container-run - run the BAP podman, docker, or singularity image.
#
#   Convenience wrapper for running the cge-bap image regardless of
#   whether it is a Docker, Podman, or Singularity (sif) image..
#
#   NOTE: you must set the three BAP_* variables below to match your
#         installation, or override them on invocation.
#
# USAGE
#
#   All arguments are passed verbatim to the run command, so this
#   script can be used to run any program on PATH in the container:
#
#       bap-container-run kma_index ...
#       bap-container-run virulencefinder ...
#	bap-container-run blastn ...
#
#   And this of course includes the BAP:
#
#       bap-container-run BAP ...
#
#   When invoked without any arguments at all, this script runs an
#   interactive bash in the container:
#
#       bap-container-run
#       nobody@9febb34:~$ _
#
#   The BAP script in this directory invokes this script to run the
#   container, after having mapped file paths onto its mount points.

# CONFIGURATION
#
#   You must set the following three variables to match your installation.
#   The ${VAR:-default} syntax ensures that these variables can also be
#   overridden from the invoking shell.

# BAP_DB_DIR
# - Must be set to the root directory of the CGE databases.
# - Default is just an example path
BAP_DB_DIR="${BAP_DB_DIR:-"/data/cge/db"}"

# BAP_IMAGE
# - Set this to the Podman or Docker image name, or the full path to the
#   Singularity (sif) image.
# - Default is the name of the image as produced by the build.sh script.
BAP_IMAGE="${BAP_IMAGE:-"localhost/cge-bap:latest"}"

# BAP_RUNTIME
# - Set to (optional full path to) the podman, docker or singularity command
# - Default is podman
BAP_RUNTIME="${BAP_RUNTIME:-"podman"}"

### No changes needed beyond this point, but feel free to look ###

err_exit() { echo "$(basename "$0"): $*" >&2; exit 1; }

[ -d "$BAP_DB_DIR" ] ||
    err_exit "please set BAP_DB_DIR to a valid directory: no such directory: $BAP_DB_DIR"

[ -n "$BAP_RUNTIME" ] && command -v $BAP_RUNTIME >/dev/null ||
    err_exit "please set BAP_RUNTIME to a valid command: no such command: $BAP_RUNTIME"

[ -n "$BAP_IMAGE" ] && [ -f "$BAP_IMAGE" ] || [ -n "$("$BAP_RUNTIME" image ls -q "$BAP_IMAGE" 2>/dev/null)" ] ||
    err_exit "please set BAP_IMAGE to a valid container image: $BAP_RUNTIME cannot run $BAP_IMAGE"

[ -z "$BAP_WORK_DIR" ] || [ -d "$BAP_WORK_DIR" ] ||
    err_exit "no such directory (BAP_WORK_DIR): $BAP_WORK_DIR"

# If no arguments, pass the arguments for entering interactive bash
[ $# -eq 0 ] && { OPT_TI="-ti"; DO_CMD="bash"; } || unset OPT_TI DO_CMD

[ "${BAP_RUNTIME##*/}" = 'singularity' ] && ARGS='exec' || ARGS="run $OPT_TI --rm --read-only --tmpfs /run --tmpfs /tmp"

exec $BAP_RUNTIME $ARGS \
   -v "/:/host:ro" \
   -v "$BAP_DB_DIR:/databases:ro" \
   -v "${BAP_WORK_DIR:-$PWD}:/workdir" \
   "$BAP_IMAGE" $DO_CMD "$@"

# vim: sts=4:sw=4:si:ai:et
